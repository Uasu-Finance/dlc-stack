# cargo-features = ["per-package-target"]

[package]
edition = "2021"
name = "dlc-tools"
version = "1.0.3"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
attestor-client = { path = "../attestor-client" }
base64 = "0.13.1"
bitcoin = { version = "0.29.2", features = ["serde"] }
chrono = { version = "0.4.19", features = ["serde"] }
dlc-clients = { path = "../clients" }
dlc-link-manager = { path = "../dlc-link-manager" }
dlc-manager = { git = "https://github.com/dlc-link/rust-dlc", rev = "c55e128", features = ["use-serde"] }
dlc-messages = { git = "https://github.com/dlc-link/rust-dlc", rev = "c55e128", features = ["use-serde"] }
getrandom = { version = "0.2", features = ["js"] }
lightning = { version = "0.0.116" }
log = "0.4.17"
reqwest = { version = "0.11.16", default-features = false, features = ["json"] }
serde = { version = "1.0.193", features = ["derive"] }
serde_json = "1.0.81"
secp256k1-zkp = { version = "0.7.0", features = [
  "bitcoin_hashes",
  "global-context",
  "rand",
  "rand-std",
  "serde",
] }
js-interface-wallet = { path = "../js-interface-wallet" }
serde-wasm-bindgen = "0.4"
wasm-bindgen-futures = { version = "0.4.34" }
wasm-bindgen = { version = "0.2.84", features = ["serde-serialize"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

esplora-async-blockchain-provider-js-wallet = { path = "../esplora-async-blockchain-provider-js-wallet" }

[dependencies.web-sys]
version = "0.3"
features = ["console"]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"


[package.metadata.wasm-pack.profile.release]
wasm-opt = false
