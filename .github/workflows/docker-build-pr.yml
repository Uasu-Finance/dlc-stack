# Cargo and Integration Test on PR to dev / master branch

name: Tests on PR

on:
  pull_request:
    branches:
      - dev
      - master
    types:
      - opened
      - reopened
      - synchronize

jobs:
  cargo-test:
    name: Cargo test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: setup toolchain
        run: rustup override set nightly-2023-10-23
      - name: build
        run: cargo build
      - name: test
        run: cargo test

  build-storageapi:
    name: Build storage-api
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: storage-api
          IMAGE_TAG: test-${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f storage/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-attestor:
    name: Build attestor
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dlc-attestor
          IMAGE_TAG: test-${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f attestor/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-wallet:
    name: Build router-wallet
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dlc-protocol-wallet
          IMAGE_TAG: test-${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f wallet/docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-it:
    name: Build test container
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dlc-integration-test
          IMAGE_TAG: test-${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f it/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  run-test:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: [build-storageapi, build-attestor, build-wallet, build-it]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Run test
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dlc-integration-test
          IMAGE_TAG: test-${{ steps.vars.outputs.sha_short }}
          XPRIV: ${{ secrets.XPRIV }}
          FINGERPRINT: ${{ secrets.FINGERPRINT }}
        run: |
          cd it && IMAGE_TAG=$IMAGE_TAG XPRIV=$XPRIV FINGERPRINT=$FINGERPRINT docker compose --profile it up -d
      - name: Wait for the test container to complete
        run: |
          while true; do
            status=$(docker ps -a -f name=integration-test --format '{{.Status}}')
            exit_code=$(echo $status | awk '{print $2}' | tr -d '()')

            if [[ "$status" =~ "Exited" ]]; then
              if [[ "$exit_code" == "0" ]]; then
                echo "Test succeeded"
                break
              elif [[ "$exit_code" != "" ]]; then
                echo "Test failed with exit code $exit_code"
                docker logs integration-test
                exit 1
              fi
            else
              echo "Waiting for test to complete, current status: $status"
              docker logs --since=5s integration-test
            fi
            sleep 5
          done

      - name: Retrieve test logs
        run: |
          docker logs integration-test

      - name: Remove containers
        run: docker compose down
